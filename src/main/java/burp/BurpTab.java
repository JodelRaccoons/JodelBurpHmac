package burp;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Objects;

/**
 *
 * @author lor
 */
public class BurpTab extends javax.swing.JPanel {

    /**
     * Creates new form BurpTab
     */

    private void clearLogButtonActionPerformed(ActionEvent e) {
        this.logTextPane.setText("");
    }

    private void userAgentComboBoxItemStateChanged(ItemEvent e) {
        setCustomUATextFieldEnabled(String.valueOf(userAgentComboBox.getSelectedItem()).contains("Custom"));
    }

    private void userAgentComboBoxMouseClicked(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            StringSelection selection = new StringSelection(String.valueOf(userAgentComboBox.getSelectedItem()));
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(selection, selection);
        }
    }

    private void toggleReplaceAccessTokenStateChanged(ChangeEvent e) {
        toggleReplaceAccessToken.setText("Replace access token: " + (toggleReplaceAccessToken.isSelected() ? "On" : "Off"));
    }

    private void toggleButtonUpdateLocationStateChanged(ChangeEvent e) {
        toggleButtonUpdateLocation.setText("Force update location: " + (toggleButtonUpdateLocation.isSelected() ? "On" : "Off"));
    }

    private void toggleButtonScrapeTokensFromResponsesStateChanged(ChangeEvent e) {
        toggleButtonScrapeTokensFromResponses.setText("Scrape tokens from responses: " + (toggleButtonScrapeTokensFromResponses.isSelected() ? "On" : "Off"));
    }

    private void toggleButtonQuickSwitchStateChanged(ChangeEvent e) {
        if (toggleButtonQuickSwitch.isSelected()) {
            toggleButtonQuickSwitch.setText("QuickSwitch: Android");
            setHmacKey(BurpExtender.DEFAULT_HMAC_KEY_IOS);
            setVersion(BurpExtender.DEFAULT_VERSION_IOS);
            userAgentComboBox.setSelectedIndex(1);
            clientTypeComboBox.setSelectedIndex(1);
        } else {
            toggleButtonQuickSwitch.setText("QuickSwitch: iOS");
            setHmacKey(BurpExtender.DEFAULT_HMAC_KEY_ANDROID);
            setVersion(BurpExtender.DEFAULT_VERSION_ANDROID);
            userAgentComboBox.setSelectedIndex(0);
            clientTypeComboBox.setSelectedIndex(0);
        }
    }

    public BurpTab() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        headerNameLabel = new JLabel();
        versionText = new JTextField();
        headerValuePrefixLabel = new JLabel();
        hmacKeyText = new JTextField();
        label1 = new JLabel();
        label2 = new JLabel();
        label3 = new JLabel();
        apiVersionText = new JTextField();
        verboseLoggingCheckbox = new JCheckBox();
        enabledCheckBox = new JCheckBox();
        scrollPane1 = new JScrollPane();
        logTextPane = new JTextPane();
        label4 = new JLabel();
        locationText = new JTextField();
        clientTypeComboBox = new JComboBox<>();
        clearLogButton = new JButton();
        userAgentComboBox = new JComboBox<>();
        label5 = new JLabel();
        label6 = new JLabel();
        label7 = new JLabel();
        textFieldAccessToken = new JTextField();
        textFieldRefreshToken = new JTextField();
        toggleReplaceAccessToken = new JToggleButton();
        textFieldUserAgent = new JTextField();
        toggleButtonUpdateLocation = new JToggleButton();
        toggleButtonScrapeTokensFromResponses = new JToggleButton();
        toggleButtonQuickSwitch = new JToggleButton();

        //======== this ========

        //---- headerNameLabel ----
        headerNameLabel.setText("HMAC Key");

        //---- versionText ----
        versionText.setText(" ");
        versionText.setToolTipText("Enter the corresponding app version");

        //---- headerValuePrefixLabel ----
        headerValuePrefixLabel.setText("Version");

        //---- hmacKeyText ----
        hmacKeyText.setToolTipText("Enter the HMAC key extracted from the app");

        //---- label1 ----
        label1.setText("API Version");

        //---- label2 ----
        label2.setText("User Agent");

        //---- label3 ----
        label3.setText("Client Type");

        //---- apiVersionText ----
        apiVersionText.setToolTipText("Placed in the X-Api-Version header. Use \"0.2\" if you dont know what to enter.");

        //---- verboseLoggingCheckbox ----
        verboseLoggingCheckbox.setText("Verbose logging");

        //---- enabledCheckBox ----
        enabledCheckBox.setText("Enabled");
        enabledCheckBox.setSelected(true);
        enabledCheckBox.setToolTipText("Globally enables or disables the plugins functionality.");

        //======== scrollPane1 ========
        {
            scrollPane1.setViewportView(logTextPane);
        }

        //---- label4 ----
        label4.setText("Location");

        //---- locationText ----
        locationText.setToolTipText("Placed in the X-Location header. Might be used to idendify possible fraudulent use / fake locations by the API.");

        //---- clientTypeComboBox ----
        clientTypeComboBox.setModel(new DefaultComboBoxModel<>(new String[] {
            "android_%s",
            "ios_%s"
        }));
        clientTypeComboBox.setToolTipText("Placed in the X-Client-Type header, used by the server to distinguish between Android and iOS");

        //---- clearLogButton ----
        clearLogButton.setText("Clear log");
        clearLogButton.addActionListener(e -> clearLogButtonActionPerformed(e));

        //---- userAgentComboBox ----
        userAgentComboBox.setModel(new DefaultComboBoxModel<>(new String[] {
            "Jodel/%s Dalvik/2.1.0 (Linux; U; Android 16; Pixel 9 Build/AAAA.123456.789)",
            "Jodel/%s (iPhone; iOS 14.6; Scale/2.00)",
            "Custom"
        }));
        userAgentComboBox.setToolTipText("Placed as User-Agent header. \"%s\" represents a placeholder which is filled with the app version.");
        userAgentComboBox.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                userAgentComboBoxMouseClicked(e);
            }
        });
        userAgentComboBox.addItemListener(e -> userAgentComboBoxItemStateChanged(e));

        //---- label5 ----
        label5.setText("Custom UA");

        //---- label6 ----
        label6.setText("Access token");

        //---- label7 ----
        label7.setText("Refresh token");

        //---- textFieldAccessToken ----
        textFieldAccessToken.setToolTipText("Contains the access_token sent in the Authorization: <token> header. Is filled as soon as any response containing a access_token is caught by Burp (Proxy or Repeater). If you have a valid access_token, you can directly fill it in.");

        //---- textFieldRefreshToken ----
        textFieldRefreshToken.setToolTipText("Currently not in use, if a token refresh mechanism is implemented this token could become relevant. Is filled as soon as any response containing a refresh_token is caught by Burp (Proxy or Repeater).");

        //---- toggleReplaceAccessToken ----
        toggleReplaceAccessToken.setText("Replace access token: On");
        toggleReplaceAccessToken.setSelected(true);
        toggleReplaceAccessToken.setToolTipText("Replace the Authorization: <token> header on all requests performed using the Repeater");
        toggleReplaceAccessToken.addChangeListener(e -> toggleReplaceAccessTokenStateChanged(e));

        //---- textFieldUserAgent ----
        textFieldUserAgent.setToolTipText("Select \"Custom\" user agent in the dropdown list and enter your custom user agent here.\nInclude %s for automatic version string insertion.");

        //---- toggleButtonUpdateLocation ----
        toggleButtonUpdateLocation.setText("Force update location: On");
        toggleButtonUpdateLocation.setToolTipText("Forefully updates the X-Location header in requests with the value set here. If disabled, the X-Location header from the previous request is taken if present.");
        toggleButtonUpdateLocation.setSelected(true);
        toggleButtonUpdateLocation.addChangeListener(e -> toggleButtonUpdateLocationStateChanged(e));

        //---- toggleButtonScrapeTokensFromResponses ----
        toggleButtonScrapeTokensFromResponses.setText("Scrape tokens from responses: On");
        toggleButtonScrapeTokensFromResponses.setSelected(true);
        toggleButtonScrapeTokensFromResponses.setToolTipText("Searches for access_token and refresh_token in responses automatically and fills them in to the above text fields.");
        toggleButtonScrapeTokensFromResponses.addChangeListener(e -> toggleButtonScrapeTokensFromResponsesStateChanged(e));

        //---- toggleButtonQuickSwitch ----
        toggleButtonQuickSwitch.setText("QuickSwitch: iOS");
        toggleButtonQuickSwitch.setToolTipText("Quickly switch between iOS and Android configurations");
        toggleButtonQuickSwitch.addChangeListener(e -> toggleButtonQuickSwitchStateChanged(e));

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup()
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addGroup(layout.createParallelGroup()
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label3, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 1028, Short.MAX_VALUE)
                                    .addComponent(enabledCheckBox))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup()
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup()
                                                .addGroup(layout.createParallelGroup()
                                                    .addComponent(label2, GroupLayout.Alignment.TRAILING)
                                                    .addComponent(headerValuePrefixLabel)
                                                    .addComponent(headerNameLabel))
                                                .addComponent(label1, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(label4, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(label5))
                                            .addGap(26, 26, 26))
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup()
                                                .addComponent(label6)
                                                .addComponent(label7))
                                            .addGap(18, 18, 18)))
                                    .addGroup(layout.createParallelGroup()
                                        .addComponent(locationText, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(apiVersionText, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clientTypeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(textFieldUserAgent, GroupLayout.Alignment.LEADING)
                                            .addComponent(hmacKeyText, GroupLayout.Alignment.LEADING)
                                            .addComponent(versionText, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 216, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(userAgentComboBox, GroupLayout.Alignment.LEADING))
                                        .addComponent(toggleReplaceAccessToken)
                                        .addComponent(textFieldRefreshToken, GroupLayout.PREFERRED_SIZE, 774, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textFieldAccessToken, GroupLayout.PREFERRED_SIZE, 774, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(toggleButtonUpdateLocation)
                                        .addComponent(toggleButtonScrapeTokensFromResponses)
                                        .addComponent(toggleButtonQuickSwitch))
                                    .addGap(0, 293, Short.MAX_VALUE))))
                        .addComponent(scrollPane1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1179, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(verboseLoggingCheckbox)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 989, Short.MAX_VALUE)
                            .addComponent(clearLogButton)))
                    .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup()
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup()
                        .addComponent(enabledCheckBox)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(hmacKeyText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(headerNameLabel))
                            .addGap(13, 13, 13)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(headerValuePrefixLabel)
                                .addComponent(versionText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(label2, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(userAgentComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(13, 13, 13)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(label5)
                        .addComponent(textFieldUserAgent, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(label1, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(apiVersionText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(label3, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                        .addComponent(clientTypeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(label4)
                        .addComponent(locationText, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(toggleButtonUpdateLocation)
                    .addGap(40, 40, 40)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldAccessToken, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(label6))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldRefreshToken, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(label7))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(toggleReplaceAccessToken)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(toggleButtonScrapeTokensFromResponses)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(toggleButtonQuickSwitch)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(verboseLoggingCheckbox)
                        .addComponent(clearLogButton))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(scrollPane1, GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                    .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel headerNameLabel;
    JTextField versionText;
    private JLabel headerValuePrefixLabel;
    JTextField hmacKeyText;
    private JLabel label1;
    private JLabel label2;
    private JLabel label3;
    JTextField apiVersionText;
    private JCheckBox verboseLoggingCheckbox;
    private JCheckBox enabledCheckBox;
    private JScrollPane scrollPane1;
    private JTextPane logTextPane;
    private JLabel label4;
    private JTextField locationText;
    private JComboBox<String> clientTypeComboBox;
    private JButton clearLogButton;
    private JComboBox<String> userAgentComboBox;
    private JLabel label5;
    private JLabel label6;
    private JLabel label7;
    private JTextField textFieldAccessToken;
    private JTextField textFieldRefreshToken;
    private JToggleButton toggleReplaceAccessToken;
    private JTextField textFieldUserAgent;
    private JToggleButton toggleButtonUpdateLocation;
    private JToggleButton toggleButtonScrapeTokensFromResponses;
    private JToggleButton toggleButtonQuickSwitch;
    // End of variables declaration//GEN-END:variables


    public void appendLog(String log) {
        try {
            logTextPane.getDocument().insertString(logTextPane.getDocument().getLength(), log + "\r\n", null);
        } catch (BadLocationException e) {
            System.err.println(log);
            System.err.println(e);
        }
    }

    public String getVersion() {
        return versionText.getText();
    }

    public void setVersion(String version) {
        versionText.setText(version);
    }

    public String getHmacKey() {
        return hmacKeyText.getText();
    }

    public void setHmacKey(String hmacKey) {
        hmacKeyText.setText(hmacKey);
    }

    public String getUserAgent() {
        return Objects.equals(userAgentComboBox.getSelectedItem(), "Custom") ? textFieldUserAgent.getText() : String.valueOf(userAgentComboBox.getSelectedItem());
    }

    public void setUserAgent(String ua) {
        textFieldUserAgent.setText(ua);
    }

    public String getApiVersion() {
        return apiVersionText.getText();
    }

    public void setApiVersion(String apiVersion) {
        apiVersionText.setText(apiVersion);
    }

    public String getClientType() {
        return (String) clientTypeComboBox.getSelectedItem();
    }

    public boolean enabled() {
        return enabledCheckBox.isSelected();
    }

    public boolean verboseLogging() {
        return verboseLoggingCheckbox.isSelected();
    }

    public String getLocationText() {
        return locationText.getText();
    }

    public void setLocationText(String locationText) {
        this.locationText.setText(locationText);
    }


    public String getTextFieldAccessToken() {
        return textFieldAccessToken.getText();
    }

    public void setTextFieldAccessToken(String textFieldAccessToken) {
        this.textFieldAccessToken.setText(textFieldAccessToken);
    }

    public String getTextFieldRefreshToken() {
        return textFieldRefreshToken.getText();
    }

    public void setTextFieldRefreshToken(String textFieldRefreshToken) {
        this.textFieldRefreshToken.setText(textFieldRefreshToken);
    }

    public boolean getToggleReplaceAccessToken() {
        return toggleReplaceAccessToken.isSelected();
    }

    public boolean getUpdateLocation() {
        return toggleButtonUpdateLocation.isSelected();
    }

    public boolean scrapeTokensFromResponses(){
        return toggleButtonScrapeTokensFromResponses.isSelected();
    }

    public void setCustomUATextFieldEnabled(boolean enabled) {
        this.textFieldUserAgent.setEnabled(enabled);
    }
}
